---
image: code.chs.usgs.gov:5001/usgs-chs/chs-library/docker/images/ruby:latest

variables:
  SCRIPT_PATH: ci_scripts

# pages:
#   script:
#     - pandoc -f markdown index.md > index.html --lua-filter=./ci_scripts/links_to_html.lua
#     - bundle exec jekyll build -d public
#   artifacts:
#     paths:
#       - public
#   before_script:
#     - wget https://github.com/jgm/pandoc/releases/download/3.1.12.2/pandoc-3.1.12.2-linux-amd64.tar.gz
#     - tar xvzf ./pandoc-3.1.12.2-linux-amd64.tar.gz --strip-components 1 -C /usr/local/
#     - gem install bundler
#     - bundle install
#     - mkdir lua_build
#     - cd lua_build
#     - wget http://www.lua.org/ftp/lua-5.4.6.tar.gz
#     - tar zxf lua-5.4.6.tar.gz
#     - cd lua-5.4.6
#     - make linux test
#     - make install
#     - cd ../..
#     - chmod a+x $SCRIPT_PATH/convert_markdown.sh
#     - $SCRIPT_PATH/convert_markdown.sh docs/

stages:
  - test
  - deploy

# Runs MkDocs to convert markdown to HTML
.gitlab-pages-generation-template:
  stage: deploy
  interruptible: true
  image: code.chs.usgs.gov:5001/ctek/docker/mkdocs:1
  cache: []
  variables:
    # The location in your project where the mkdocs.yml configuration file may
    # be found
    MKDOCS_CONFIG_LOCATION: mkdocs.yml
    # The location in your project that contains at least the entrypoint for
    # documentation. For example, a README.md file in the root dir
    PROJECT_DOCUMENTATION_BASE: '.'
    # This is the name of the ephemeral documentation dir that mkdocs looks at
    # to source the markdown content. "docs" is the default directory name. This
    # assumes your project doesn't already have a docs dir. If it does, change
    # this to something else and make sure to also change the "docs_dir"
    # parameter in your mkdocs.yml file. This is used by this pipeline to copy
    # everything from $PROJECT_DOCUMENTATION_BASE to an ephemeral directory by
    # this name to provide to mkdocs
    MKDOCS_DOCS_DIR: docs
    # Your mkdocs.yml configuration may contain extra plugins. Those plugins may
    # not be present in the base Docker mkdocs image. Should those plugin
    # dependencies be downloaded before the run?
    DOWNLOAD_DYNAMIC_DEPENDENCIES: 'true'
  script:
    - |-
      #

      export ROOT_PROJECT_DIR="$(pwd)"
      cd ..
      export STAGING_DIR="$(pwd)/mkdocs_staging"
      cd $ROOT_PROJECT_DIR

      echo -e "\e[0Ksection_start:`date +%s`:prepare[collapsed=true]\r\e[0KPreparing documentation base for conversion..."
      echo "Creating staging directory ${STAGING_DIR}"
      rm -rf "${STAGING_DIR}" || true
      rm -rf "${ROOT_PROJECT_DIR}/public" || true
      mkdir "${STAGING_DIR}"

      echo "Creating source directory ${STAGING_DIR}/${MKDOCS_DOCS_DIR}"
      mkdir "${STAGING_DIR}/${MKDOCS_DOCS_DIR}"

      # Copy everything from the project's documentation base to the staginog
      # source docs dir
      echo "Copying ${PROJECT_DOCUMENTATION_BASE}/* ${STAGING_DIR}/${MKDOCS_DOCS_DIR}"
      cp -R ${PROJECT_DOCUMENTATION_BASE}/* ${STAGING_DIR}/${MKDOCS_DOCS_DIR}

      echo "Copying ${MKDOCS_CONFIG_LOCATION} to ${STAGING_DIR}"
      cp ${MKDOCS_CONFIG_LOCATION} ${STAGING_DIR}/mkdocs.yml

      # This copies content from the mkdocs Docker image into the current
      # working directory
      echo "Copying mkdocs docker image /data to ${STAGING_DIR}"
      cp /data/* ${STAGING_DIR}/

      echo -e "\e[0Ksection_end:`date +%s`:prepare\r\e[0K"

      if [[ "${DOWNLOAD_DYNAMIC_DEPENDENCIES}" == "true" ]]; then
        echo -e "\e[0Ksection_start:`date +%s`:deps[collapsed=true]\r\e[0KDownloading plugin dependencies..."
        mkdocs get-deps -v -f ${STAGING_DIR}/mkdocs.yml > requirements-mkdocs.txt
        pip install -r requirements-mkdocs.txt
        rm requirements-mkdocs.txt
        echo -e "\e[0Ksection_end:`date +%s`:deps\r\e[0K"
      fi

      echo -e "\e[0Ksection_start:`date +%s`:convert[collapsed=false]\r\e[0KPerform conversion..."
      echo "Switching to staging directory"
      cd "${STAGING_DIR}"

      echo "Performing conversion into HTML..."
      mkdocs build -v -f mkdocs.yml -d public

      echo "Moving ${STAGING_DIR}/public to ${ROOT_PROJECT_DIR}/public/"
      mv "${STAGING_DIR}/public" "${ROOT_PROJECT_DIR}/public/"
      echo -e "\e[0Ksection_end:`date +%s`:convert\r\e[0K"
  artifacts:
    paths:
      - public


# ðŸ”Ž pages:
#   stage: test
#   variables:
#     MKDOCS_CONFIG_LOCATION: mkdocs.yml
#     PROJECT_DOCUMENTATION_BASE: docs
#   extends: .gitlab-pages-generation-template
#   interruptible: true
#   artifacts:
#     paths:
#       - test_public

pages:
  extends: .gitlab-pages-generation-template
  # rules:
  #   - !reference [.templates_helpers_rules, not_on_merge_request]
  #   - !reference [.templates_helpers_rules, not_on_development_tag]
  #   - !reference [.templates_helpers_rules, always_on_tags]

